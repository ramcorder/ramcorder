/* -LICENSE-START-
** Copyright (c) 2018 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/
// SignalGenHDRDlg.h : header file
//

#pragma once

#include <map>
#include "Resource.h"
#include "DeckLinkAPI_h.h"
#include "DeckLinkDeviceDiscovery.h"
#include "PreviewWindow.h"
#include "HDRVideoFrame.h"

// Custom Messages
#define WM_ADD_DEVICE_MESSAGE					(WM_APP + 1)
#define WM_REMOVE_DEVICE_MESSAGE				(WM_APP + 2)

enum class EOTF { SDR = 0, HDR = 1, PQ = 2, HLG = 3 };

// Forward declarations
class DeckLinkDeviceDiscovery;
class PreviewWindow;

// CSignalGenHDRDlg dialog
class CSignalGenHDRDlg : public CDialog
{
	using DisplayModeMap = std::map<BMDDisplayMode, CComPtr<IDeckLinkDisplayMode>>;

	// Construction
public:
	explicit CSignalGenHDRDlg(CWnd* pParent = NULL);	// standard constructor
	~CSignalGenHDRDlg() {};

	// Dialog Data
	enum { IDD = IDD_SIGNALGENHDR_DIALOG };

protected:
	virtual void DoDataExchange(CDataExchange* pDX);	// DDX/DDV support

// Implementation
private:
	HICON						m_hIcon;
	//
	CButton						m_startButton;
	CComboBox					m_deviceListCombo;
	CComboBox					m_videoFormatCombo;
	CComboBox					m_pixelFormatCombo;

	CComboBox					m_eotfCombo;
	CSliderCtrl					m_displayPrimaryRedXSlider;
	CSliderCtrl					m_displayPrimaryRedYSlider;
	CSliderCtrl					m_displayPrimaryGreenXSlider;
	CSliderCtrl					m_displayPrimaryGreenYSlider;
	CSliderCtrl					m_displayPrimaryBlueXSlider;
	CSliderCtrl					m_displayPrimaryBlueYSlider;
	CSliderCtrl					m_whitePointXSlider;
	CSliderCtrl					m_whitePointYSlider;
	CSliderCtrl					m_maxDisplayMasteringLuminanceSlider;
	CSliderCtrl					m_minDisplayMasteringLuminanceSlider;
	CSliderCtrl					m_maxFALLSlider;
	CSliderCtrl					m_maxCLLSlider;

	CEdit						m_displayPrimaryRedXEdit;
	CEdit						m_displayPrimaryRedYEdit;
	CEdit						m_displayPrimaryGreenXEdit;
	CEdit						m_displayPrimaryGreenYEdit;
	CEdit						m_displayPrimaryBlueXEdit;
	CEdit						m_displayPrimaryBlueYEdit;
	CEdit						m_whitePointXEdit;
	CEdit						m_whitePointYEdit;
	CEdit						m_maxDisplayMasteringLuminanceEdit;
	CEdit						m_minDisplayMasteringLuminanceEdit;
	CEdit						m_maxFALLEdit;
	CEdit						m_maxCLLEdit;

	CStatic						m_previewBox;
	CComPtr<PreviewWindow>		m_previewWindow;

	bool						m_running;
	
	CComPtr<DeckLinkDeviceDiscovery>	m_deckLinkDiscovery;
	CComPtr<IDeckLinkDisplayMode>		m_selectedDisplayMode;
	CComQIPtr<IDeckLinkOutput>			m_selectedDeckLinkOutput;
	CComQIPtr<IDeckLinkConfiguration>	m_selectedDeckLinkConfiguration;
	CComPtr<HDRVideoFrame>				m_videoFrameBars;
	BMDPixelFormat						m_selectedPixelFormat;
	HDRMetadata							m_selectedHDRParameters;

	DisplayModeMap				m_supportedDisplayModeMap;

	// Generated message map functions
	virtual BOOL	OnInitDialog();
	void			EnableInterface(bool enable);
	void			EnableHDRInterface(bool enable);
	
	afx_msg void	OnPaint();
	afx_msg void	OnClose();
	afx_msg HCURSOR	OnQueryDragIcon();
	DECLARE_MESSAGE_MAP()
	
	// Signal Generator Implementation
	void			StartRunning ();
	void			StopRunning ();

	void			RefreshDisplayModeMenu(void);
	void			RefreshPixelFormatMenu(void);
	void			RefreshEOTFMenu(void);
	void			AddDevice(CComPtr<IDeckLink> deckLink);
	void			RemoveDevice(CComPtr<IDeckLink> deckLink);


public:
	afx_msg void OnBnClickedOk();
	afx_msg void OnNewDeviceSelected();
	afx_msg void OnNewVideoFormatSelected();
	afx_msg void OnNewPixelFormatSelected();
	afx_msg void OnHScroll(UINT nSBCode, UINT nPos, CScrollBar* pScrollBar);
	afx_msg void OnNewEOTFSelected();

	afx_msg LRESULT	OnAddDevice(WPARAM wParam, LPARAM lParam);
	afx_msg LRESULT	OnRemoveDevice(WPARAM wParam, LPARAM lParam);

private:
	HRESULT	CreateColorbarsFrame();
	void	UpdateSliderValues();
	void	UpdateOutputFrame();
};

static int GetBytesPerRow(BMDPixelFormat pixelFormat, ULONG frameWidth);
