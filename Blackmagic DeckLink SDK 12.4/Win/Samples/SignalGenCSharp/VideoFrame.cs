/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
** 
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

using System;
using System.Runtime.InteropServices;
using DeckLinkAPI;

namespace SignalGenCSharp
{
	class VideoFrame : IDeckLinkMutableVideoFrame, IDeckLinkVideoFrame3DExtensions, IDeckLinkVideoFrameMetadataExtensions
	{
		private readonly IDeckLinkMutableVideoFrame m_frameLeft;
		private readonly IDeckLinkMutableVideoFrame m_frameRight;
		private readonly _BMDColorspace m_colorspace;

		public VideoFrame(IDeckLinkMutableVideoFrame left, IDeckLinkMutableVideoFrame right = null, _BMDColorspace colorspace = _BMDColorspace.bmdColorspaceRec709)
		{
			m_frameLeft = left;
			m_frameRight = right;
			m_colorspace = colorspace;
		}

		~VideoFrame()
		{
			Marshal.ReleaseComObject(m_frameLeft);
			if (m_frameRight != null)
				Marshal.ReleaseComObject(m_frameRight);
		}

		public int GetWidth() => m_frameLeft.GetWidth();
		public int GetHeight() => m_frameLeft.GetHeight();
		public int GetRowBytes() => m_frameLeft.GetRowBytes();
		public _BMDPixelFormat GetPixelFormat() => m_frameLeft.GetPixelFormat();
		public _BMDFrameFlags GetFlags() => m_frameLeft.GetFlags();

		public void GetBytes(out IntPtr buffer)
		{
			m_frameLeft.GetBytes(out buffer);
		}

		public void GetTimecode(_BMDTimecodeFormat format, out IDeckLinkTimecode timecode)
		{
			m_frameLeft.GetTimecode(format, out timecode);
		}

		public void GetAncillaryData(out IDeckLinkVideoFrameAncillary ancillary)
		{
			m_frameLeft.GetAncillaryData(out ancillary);
		}

		void IDeckLinkMutableVideoFrame.SetFlags(_BMDFrameFlags newFlags) => m_frameLeft.SetFlags(newFlags);
		void IDeckLinkMutableVideoFrame.SetTimecode(_BMDTimecodeFormat format, IDeckLinkTimecode timecode) => m_frameLeft.SetTimecode(format, timecode);
		void IDeckLinkMutableVideoFrame.SetTimecodeFromComponents(_BMDTimecodeFormat format, byte hours, byte minutes, byte seconds, byte frames, _BMDTimecodeFlags flags) =>
			m_frameLeft.SetTimecodeFromComponents(format, hours, minutes, seconds, frames, flags);
		void IDeckLinkMutableVideoFrame.SetAncillaryData(IDeckLinkVideoFrameAncillary ancillary) => m_frameLeft.SetAncillaryData(ancillary);
		void IDeckLinkMutableVideoFrame.SetTimecodeUserBits(_BMDTimecodeFormat format, uint userBits) => m_frameLeft.SetTimecodeUserBits(format, userBits);

		_BMDVideo3DPackingFormat IDeckLinkVideoFrame3DExtensions.Get3DPackingFormat() => _BMDVideo3DPackingFormat.bmdVideo3DPackingLeftOnly;

		void IDeckLinkVideoFrame3DExtensions.GetFrameForRightEye(out IDeckLinkVideoFrame rightEyeFrame)
		{
			rightEyeFrame = m_frameRight as IDeckLinkVideoFrame;
		}

		void IDeckLinkVideoFrameMetadataExtensions.GetInt(_BMDDeckLinkFrameMetadataID metadataID, out long value)
		{
			if (metadataID == _BMDDeckLinkFrameMetadataID.bmdDeckLinkFrameMetadataColorspace)
				value = (long)m_colorspace;
			else
				throw new ArgumentException();
		}

		void IDeckLinkVideoFrameMetadataExtensions.GetFloat(_BMDDeckLinkFrameMetadataID metadataID, out double value)
		{
			throw new ArgumentException();
		}

		void IDeckLinkVideoFrameMetadataExtensions.GetFlag(_BMDDeckLinkFrameMetadataID metadataID, out int value)
		{
			throw new ArgumentException();
		}

		void IDeckLinkVideoFrameMetadataExtensions.GetString(_BMDDeckLinkFrameMetadataID metadataID, out string value)
		{
			throw new ArgumentException();
		}

		void IDeckLinkVideoFrameMetadataExtensions.GetBytes(_BMDDeckLinkFrameMetadataID metadataID, IntPtr buffer, ref uint bufferSize)
		{
			throw new ArgumentException();
		}
	}
}
