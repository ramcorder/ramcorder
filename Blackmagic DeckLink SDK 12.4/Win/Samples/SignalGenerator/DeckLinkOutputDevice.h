/* -LICENSE-START-
** Copyright (c) 2020 Blackmagic Design
**  
** Permission is hereby granted, free of charge, to any person or organization 
** obtaining a copy of the software and accompanying documentation (the 
** "Software") to use, reproduce, display, distribute, sub-license, execute, 
** and transmit the Software, and to prepare derivative works of the Software, 
** and to permit third-parties to whom the Software is furnished to do so, in 
** accordance with:
** 
** (1) if the Software is obtained from Blackmagic Design, the End User License 
** Agreement for the Software Development Kit (“EULA”) available at 
** https://www.blackmagicdesign.com/EULA/DeckLinkSDK; or
** 
** (2) if the Software is obtained from any third party, such licensing terms 
** as notified by that third party,
** 
** and all subject to the following:
** 
** (3) the copyright notices in the Software and this entire statement, 
** including the above license grant, this restriction and the following 
** disclaimer, must be included in all copies of the Software, in whole or in 
** part, and all derivative works of the Software, unless such copies or 
** derivative works are solely in the form of machine-executable object code 
** generated by a source language processor.
** 
** (4) THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
** OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT 
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE 
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE, 
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER 
** DEALINGS IN THE SOFTWARE.
** 
** A copy of the Software is available free of charge at 
** https://www.blackmagicdesign.com/desktopvideo_sdk under the EULA.
** 
** -LICENSE-END-
*/

#pragma once

#include <atlstr.h>
#include <atomic>
#include <functional>
#include "DeckLinkAPI_h.h"

enum class OutputDeviceError
{
	NoError = 0,
	GetBufferedAudioSampleCountFailed,
	GetBufferedVideoFrameCountFailed,
};

class DeckLinkOutputDevice : public IDeckLinkVideoOutputCallback, public IDeckLinkAudioOutputCallback
{
	using QueryDisplayModeFunc = std::function<void(CComPtr<IDeckLinkDisplayMode>&)>;
	using ScheduledFrameCompletedCallback = std::function<void(void)>;
	using ScheduledPlaybackStoppedCallback = std::function<void(void)>;
	using RenderAudioSamplesCallback = std::function<void(unsigned int)>;
	using OutputDeviceErrorOccuredFunc = std::function<void(OutputDeviceError)>;

public:
	DeckLinkOutputDevice(CComPtr<IDeckLink>& deckLink);
	virtual ~DeckLinkOutputDevice() = default;

	bool		init();

	// IUnknown
	HRESULT		STDMETHODCALLTYPE QueryInterface(REFIID iid, LPVOID *ppv) override;
	ULONG		STDMETHODCALLTYPE AddRef() override;
	ULONG		STDMETHODCALLTYPE Release() override;

	// IDeckLinkVideoOutputCallback
	HRESULT		STDMETHODCALLTYPE ScheduledFrameCompleted(IDeckLinkVideoFrame* completedFrame, BMDOutputFrameCompletionResult result) override;
	HRESULT		STDMETHODCALLTYPE ScheduledPlaybackHasStopped() override;

	// IDeckLinkAudioOutputCallback
	HRESULT		STDMETHODCALLTYPE RenderAudioSamples(BOOL preroll) override;

	const CString&						getDeviceName() const { return m_deviceName; }
	CComPtr<IDeckLinkOutput>			getDeviceOutput() const { return m_deckLinkOutput; }
	CComPtr<IDeckLinkConfiguration>		getDeviceConfiguration() const { return m_deckLinkConfiguration; }
	CComPtr<IDeckLink>					getDeckLinkInstance() const { return m_deckLink; }

	void								onScheduledFrameCompleted(const ScheduledFrameCompletedCallback& callback) { m_scheduledFrameCompletedCallback = callback; }
	void								onScheduledPlaybackStopped(const ScheduledPlaybackStoppedCallback& callback) { m_scheduledPlaybackStoppedCallback = callback; }
	void								onRenderAudioSamples(const RenderAudioSamplesCallback& callback) { m_renderAudioSamplesCallback = callback; }
	void								queryDisplayModes(QueryDisplayModeFunc func);
	void								setErrorListener(const OutputDeviceErrorOccuredFunc& func) { m_errorListener = func; }

	void								setVideoPrerollSize(const unsigned int videoPrerollSize) { m_videoPrerollSize = videoPrerollSize; }
	void								setAudioWaterLevel(const unsigned int audioWaterLevel) { m_audioWaterLevel = audioWaterLevel; }

private:
	CComPtr<IDeckLink>					m_deckLink;
	CComQIPtr<IDeckLinkOutput>			m_deckLinkOutput;
	CComQIPtr<IDeckLinkConfiguration>	m_deckLinkConfiguration;
	CString								m_deviceName;

	ScheduledFrameCompletedCallback		m_scheduledFrameCompletedCallback;
	ScheduledPlaybackStoppedCallback	m_scheduledPlaybackStoppedCallback;
	RenderAudioSamplesCallback			m_renderAudioSamplesCallback;
	OutputDeviceErrorOccuredFunc		m_errorListener;

	unsigned int						m_videoPrerollSize;
	unsigned int						m_audioWaterLevel;

	std::atomic<ULONG>					m_refCount;
};

